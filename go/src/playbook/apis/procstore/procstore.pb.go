// Code generated by protoc-gen-go. DO NOT EDIT.
// source: apis/procstore/procstore.proto

package procstore

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EntityState_Verb int32

const (
	EntityState_IS             EntityState_Verb = 0
	EntityState_IS_NOT         EntityState_Verb = 1
	EntityState_HAS            EntityState_Verb = 2
	EntityState_DOES_NOT_HAVE  EntityState_Verb = 3
	EntityState_EXISTS         EntityState_Verb = 4
	EntityState_DOES_NOT_EXIST EntityState_Verb = 5
)

var EntityState_Verb_name = map[int32]string{
	0: "IS",
	1: "IS_NOT",
	2: "HAS",
	3: "DOES_NOT_HAVE",
	4: "EXISTS",
	5: "DOES_NOT_EXIST",
}

var EntityState_Verb_value = map[string]int32{
	"IS":             0,
	"IS_NOT":         1,
	"HAS":            2,
	"DOES_NOT_HAVE":  3,
	"EXISTS":         4,
	"DOES_NOT_EXIST": 5,
}

func (x EntityState_Verb) String() string {
	return proto.EnumName(EntityState_Verb_name, int32(x))
}

func (EntityState_Verb) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5ceac4e2643eb925, []int{3, 0}
}

// Top Level process object.
// All Processes are unique, but share
// many underlying entities (steps etc)
type Process struct {
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc      string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Goal      string `protobuf:"bytes,4,opt,name=goal,proto3" json:"goal,omitempty"`
	FirstStep *Step  `protobuf:"bytes,5,opt,name=FirstStep,proto3" json:"FirstStep,omitempty"`
	// An entire process can have requirements, mostly regulatory/ compliance focused
	// Aka "don't touch this if you're not a cpa"
	Reqs                 []*EntityState `protobuf:"bytes,6,rep,name=Reqs,proto3" json:"Reqs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Process) Reset()         { *m = Process{} }
func (m *Process) String() string { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()    {}
func (*Process) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ceac4e2643eb925, []int{0}
}

func (m *Process) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process.Unmarshal(m, b)
}
func (m *Process) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process.Marshal(b, m, deterministic)
}
func (m *Process) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process.Merge(m, src)
}
func (m *Process) XXX_Size() int {
	return xxx_messageInfo_Process.Size(m)
}
func (m *Process) XXX_DiscardUnknown() {
	xxx_messageInfo_Process.DiscardUnknown(m)
}

var xxx_messageInfo_Process proto.InternalMessageInfo

func (m *Process) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Process) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Process) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Process) GetGoal() string {
	if m != nil {
		return m.Goal
	}
	return ""
}

func (m *Process) GetFirstStep() *Step {
	if m != nil {
		return m.FirstStep
	}
	return nil
}

func (m *Process) GetReqs() []*EntityState {
	if m != nil {
		return m.Reqs
	}
	return nil
}

// Workflows are a collection of processes
// One process can be in >= 0 Workflows.
type Workflow struct {
	Id                   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc                 string     `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Procs                []*Process `protobuf:"bytes,4,rep,name=procs,proto3" json:"procs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Workflow) Reset()         { *m = Workflow{} }
func (m *Workflow) String() string { return proto.CompactTextString(m) }
func (*Workflow) ProtoMessage()    {}
func (*Workflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ceac4e2643eb925, []int{1}
}

func (m *Workflow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Workflow.Unmarshal(m, b)
}
func (m *Workflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Workflow.Marshal(b, m, deterministic)
}
func (m *Workflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workflow.Merge(m, src)
}
func (m *Workflow) XXX_Size() int {
	return xxx_messageInfo_Workflow.Size(m)
}
func (m *Workflow) XXX_DiscardUnknown() {
	xxx_messageInfo_Workflow.DiscardUnknown(m)
}

var xxx_messageInfo_Workflow proto.InternalMessageInfo

func (m *Workflow) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Workflow) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Workflow) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Workflow) GetProcs() []*Process {
	if m != nil {
		return m.Procs
	}
	return nil
}

// Steps in reality are shared amongst many processes,
// though returned here as if they are the child of a single process
type Step struct {
	Id    string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc  string  `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Tools []*Tool `protobuf:"bytes,4,rep,name=tools,proto3" json:"tools,omitempty"`
	// Map keys signify the choice "yes", "no", "fuck-yeah!"
	Children map[string]*Step `protobuf:"bytes,5,rep,name=children,proto3" json:"children,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Effects  []*EntityState   `protobuf:"bytes,6,rep,name=effects,proto3" json:"effects,omitempty"`
	// Not clear how to think about reqs vis-a-vis agents.
	Reqs                 []*EntityState `protobuf:"bytes,7,rep,name=reqs,proto3" json:"reqs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Step) Reset()         { *m = Step{} }
func (m *Step) String() string { return proto.CompactTextString(m) }
func (*Step) ProtoMessage()    {}
func (*Step) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ceac4e2643eb925, []int{2}
}

func (m *Step) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Step.Unmarshal(m, b)
}
func (m *Step) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Step.Marshal(b, m, deterministic)
}
func (m *Step) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Step.Merge(m, src)
}
func (m *Step) XXX_Size() int {
	return xxx_messageInfo_Step.Size(m)
}
func (m *Step) XXX_DiscardUnknown() {
	xxx_messageInfo_Step.DiscardUnknown(m)
}

var xxx_messageInfo_Step proto.InternalMessageInfo

func (m *Step) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Step) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Step) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Step) GetTools() []*Tool {
	if m != nil {
		return m.Tools
	}
	return nil
}

func (m *Step) GetChildren() map[string]*Step {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Step) GetEffects() []*EntityState {
	if m != nil {
		return m.Effects
	}
	return nil
}

func (m *Step) GetReqs() []*EntityState {
	if m != nil {
		return m.Reqs
	}
	return nil
}

// EntityState are a means of describing an abstract/ loose state
// Can be expressed as either an Effect (it is made to be so) or
// As a requirement (it must be so)
// TODO(hdh) this requires more miles before it can really be completed.
// There are lots of questions around how specific/general to model this.
// Describing state abstractly/ dynamically presents challenges.
// Current approach is to derive a simple "language" which will
// allow discussing state, but will not express much else.
type EntityState struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Entity_Type is an unbounded set,
	// but always includes at least person.
	// It cannot be enumurative, because we don't
	// know what sets of abstract entities
	// there are in any given system
	// Examples include: opportunity_record,
	// weather, knee, form-1099 etc.
	EntityType string `protobuf:"bytes,2,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	// Bet is that verb is an enumerable set.
	// Because we are only concerned with expressing the
	// state of things, not expressing an arbitrary
	// grammar.
	Verb EntityState_Verb `protobuf:"varint,3,opt,name=verb,proto3,enum=procstore.EntityState_Verb" json:"verb,omitempty"`
	// State_Name is a descriptor of what the state is.
	// Varies widely based on context...Admin, Rainy, CPA
	StateName string `protobuf:"bytes,5,opt,name=state_name,json=stateName,proto3" json:"state_name,omitempty"`
	// The state that this is contained in, can be a tool, person, or "the world"
	// Unlike entity type above, it is not a "class" but rather a specific instance
	// That the state has happened in.
	ContextId            string   `protobuf:"bytes,6,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntityState) Reset()         { *m = EntityState{} }
func (m *EntityState) String() string { return proto.CompactTextString(m) }
func (*EntityState) ProtoMessage()    {}
func (*EntityState) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ceac4e2643eb925, []int{3}
}

func (m *EntityState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityState.Unmarshal(m, b)
}
func (m *EntityState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityState.Marshal(b, m, deterministic)
}
func (m *EntityState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityState.Merge(m, src)
}
func (m *EntityState) XXX_Size() int {
	return xxx_messageInfo_EntityState.Size(m)
}
func (m *EntityState) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityState.DiscardUnknown(m)
}

var xxx_messageInfo_EntityState proto.InternalMessageInfo

func (m *EntityState) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EntityState) GetEntityType() string {
	if m != nil {
		return m.EntityType
	}
	return ""
}

func (m *EntityState) GetVerb() EntityState_Verb {
	if m != nil {
		return m.Verb
	}
	return EntityState_IS
}

func (m *EntityState) GetStateName() string {
	if m != nil {
		return m.StateName
	}
	return ""
}

func (m *EntityState) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

// Used to dynamically represent things users may wish to add in the system "the weather", "left hand" etc.
// This is mostly an escape valve for when things just don't quite fit. Should be
// used rarely. Tools, and People are modeled as abstract entities, but have thier own concrete types
// One case, we will have by default is "The World". This is to model things
// that are truly global, or functionally global in scope like, having a CPA
type AbstractEntity struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Sometimes this will be synonymous with an instances name.
	// i.e. there is only one "world". However, it
	// is also possible for this to be a grouping
	// of instances that share common states. For example
	// Models of Lawnmower, or dog breeds
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Desc                 string   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbstractEntity) Reset()         { *m = AbstractEntity{} }
func (m *AbstractEntity) String() string { return proto.CompactTextString(m) }
func (*AbstractEntity) ProtoMessage()    {}
func (*AbstractEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ceac4e2643eb925, []int{4}
}

func (m *AbstractEntity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbstractEntity.Unmarshal(m, b)
}
func (m *AbstractEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbstractEntity.Marshal(b, m, deterministic)
}
func (m *AbstractEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbstractEntity.Merge(m, src)
}
func (m *AbstractEntity) XXX_Size() int {
	return xxx_messageInfo_AbstractEntity.Size(m)
}
func (m *AbstractEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_AbstractEntity.DiscardUnknown(m)
}

var xxx_messageInfo_AbstractEntity proto.InternalMessageInfo

func (m *AbstractEntity) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AbstractEntity) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AbstractEntity) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type EntityInstance struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Desc                 string   `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntityInstance) Reset()         { *m = EntityInstance{} }
func (m *EntityInstance) String() string { return proto.CompactTextString(m) }
func (*EntityInstance) ProtoMessage()    {}
func (*EntityInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ceac4e2643eb925, []int{5}
}

func (m *EntityInstance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityInstance.Unmarshal(m, b)
}
func (m *EntityInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityInstance.Marshal(b, m, deterministic)
}
func (m *EntityInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityInstance.Merge(m, src)
}
func (m *EntityInstance) XXX_Size() int {
	return xxx_messageInfo_EntityInstance.Size(m)
}
func (m *EntityInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityInstance.DiscardUnknown(m)
}

var xxx_messageInfo_EntityInstance proto.InternalMessageInfo

func (m *EntityInstance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EntityInstance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EntityInstance) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EntityInstance) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

// Concrete Type of the abstract entity Tools
type Tool struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc                 string   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tool) Reset()         { *m = Tool{} }
func (m *Tool) String() string { return proto.CompactTextString(m) }
func (*Tool) ProtoMessage()    {}
func (*Tool) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ceac4e2643eb925, []int{6}
}

func (m *Tool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tool.Unmarshal(m, b)
}
func (m *Tool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tool.Marshal(b, m, deterministic)
}
func (m *Tool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tool.Merge(m, src)
}
func (m *Tool) XXX_Size() int {
	return xxx_messageInfo_Tool.Size(m)
}
func (m *Tool) XXX_DiscardUnknown() {
	xxx_messageInfo_Tool.DiscardUnknown(m)
}

var xxx_messageInfo_Tool proto.InternalMessageInfo

func (m *Tool) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Tool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tool) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

// Concrete Type of the abstract entity People
type Person struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Role                 string   `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	Department           string   `protobuf:"bytes,4,opt,name=department,proto3" json:"department,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Person) Reset()         { *m = Person{} }
func (m *Person) String() string { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()    {}
func (*Person) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ceac4e2643eb925, []int{7}
}

func (m *Person) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Person.Unmarshal(m, b)
}
func (m *Person) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Person.Marshal(b, m, deterministic)
}
func (m *Person) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Person.Merge(m, src)
}
func (m *Person) XXX_Size() int {
	return xxx_messageInfo_Person.Size(m)
}
func (m *Person) XXX_DiscardUnknown() {
	xxx_messageInfo_Person.DiscardUnknown(m)
}

var xxx_messageInfo_Person proto.InternalMessageInfo

func (m *Person) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Person) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Person) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *Person) GetDepartment() string {
	if m != nil {
		return m.Department
	}
	return ""
}

type AddProcessToWorkflowRequest struct {
	WkflowId             string   `protobuf:"bytes,1,opt,name=wkflow_id,json=wkflowId,proto3" json:"wkflow_id,omitempty"`
	ProcIds              []string `protobuf:"bytes,2,rep,name=proc_ids,json=procIds,proto3" json:"proc_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddProcessToWorkflowRequest) Reset()         { *m = AddProcessToWorkflowRequest{} }
func (m *AddProcessToWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*AddProcessToWorkflowRequest) ProtoMessage()    {}
func (*AddProcessToWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ceac4e2643eb925, []int{8}
}

func (m *AddProcessToWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddProcessToWorkflowRequest.Unmarshal(m, b)
}
func (m *AddProcessToWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddProcessToWorkflowRequest.Marshal(b, m, deterministic)
}
func (m *AddProcessToWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddProcessToWorkflowRequest.Merge(m, src)
}
func (m *AddProcessToWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_AddProcessToWorkflowRequest.Size(m)
}
func (m *AddProcessToWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddProcessToWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddProcessToWorkflowRequest proto.InternalMessageInfo

func (m *AddProcessToWorkflowRequest) GetWkflowId() string {
	if m != nil {
		return m.WkflowId
	}
	return ""
}

func (m *AddProcessToWorkflowRequest) GetProcIds() []string {
	if m != nil {
		return m.ProcIds
	}
	return nil
}

// All Nodes in the store can be addressed by an entity id,
// So this is a generally reusable primitive
type EntityId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntityId) Reset()         { *m = EntityId{} }
func (m *EntityId) String() string { return proto.CompactTextString(m) }
func (*EntityId) ProtoMessage()    {}
func (*EntityId) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ceac4e2643eb925, []int{9}
}

func (m *EntityId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityId.Unmarshal(m, b)
}
func (m *EntityId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityId.Marshal(b, m, deterministic)
}
func (m *EntityId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityId.Merge(m, src)
}
func (m *EntityId) XXX_Size() int {
	return xxx_messageInfo_EntityId.Size(m)
}
func (m *EntityId) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityId.DiscardUnknown(m)
}

var xxx_messageInfo_EntityId proto.InternalMessageInfo

func (m *EntityId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Anything with this message type is being punted for now
type ToDo struct {
	Todo                 string   `protobuf:"bytes,1,opt,name=todo,proto3" json:"todo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToDo) Reset()         { *m = ToDo{} }
func (m *ToDo) String() string { return proto.CompactTextString(m) }
func (*ToDo) ProtoMessage()    {}
func (*ToDo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ceac4e2643eb925, []int{10}
}

func (m *ToDo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ToDo.Unmarshal(m, b)
}
func (m *ToDo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ToDo.Marshal(b, m, deterministic)
}
func (m *ToDo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToDo.Merge(m, src)
}
func (m *ToDo) XXX_Size() int {
	return xxx_messageInfo_ToDo.Size(m)
}
func (m *ToDo) XXX_DiscardUnknown() {
	xxx_messageInfo_ToDo.DiscardUnknown(m)
}

var xxx_messageInfo_ToDo proto.InternalMessageInfo

func (m *ToDo) GetTodo() string {
	if m != nil {
		return m.Todo
	}
	return ""
}

type Empty struct {
	// TODO(hdh) import the real empty type
	Todo                 string   `protobuf:"bytes,1,opt,name=todo,proto3" json:"todo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ceac4e2643eb925, []int{11}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func (m *Empty) GetTodo() string {
	if m != nil {
		return m.Todo
	}
	return ""
}

func init() {
	proto.RegisterEnum("procstore.EntityState_Verb", EntityState_Verb_name, EntityState_Verb_value)
	proto.RegisterType((*Process)(nil), "procstore.Process")
	proto.RegisterType((*Workflow)(nil), "procstore.Workflow")
	proto.RegisterType((*Step)(nil), "procstore.Step")
	proto.RegisterMapType((map[string]*Step)(nil), "procstore.Step.ChildrenEntry")
	proto.RegisterType((*EntityState)(nil), "procstore.EntityState")
	proto.RegisterType((*AbstractEntity)(nil), "procstore.AbstractEntity")
	proto.RegisterType((*EntityInstance)(nil), "procstore.EntityInstance")
	proto.RegisterType((*Tool)(nil), "procstore.Tool")
	proto.RegisterType((*Person)(nil), "procstore.Person")
	proto.RegisterType((*AddProcessToWorkflowRequest)(nil), "procstore.AddProcessToWorkflowRequest")
	proto.RegisterType((*EntityId)(nil), "procstore.EntityId")
	proto.RegisterType((*ToDo)(nil), "procstore.ToDo")
	proto.RegisterType((*Empty)(nil), "procstore.Empty")
}

func init() { proto.RegisterFile("apis/procstore/procstore.proto", fileDescriptor_5ceac4e2643eb925) }

var fileDescriptor_5ceac4e2643eb925 = []byte{
	// 967 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xed, 0x6e, 0x1a, 0x47,
	0x14, 0x2d, 0xb0, 0x7c, 0x1d, 0x0c, 0x26, 0xd3, 0x2a, 0xda, 0x62, 0x39, 0xb5, 0x56, 0x6a, 0x65,
	0x55, 0x0a, 0x44, 0x58, 0x49, 0x9c, 0xa6, 0x8a, 0x84, 0x02, 0xb6, 0x91, 0xd2, 0x24, 0x5a, 0x88,
	0xdb, 0x1f, 0x95, 0xe8, 0x9a, 0x1d, 0xa7, 0xab, 0x2c, 0xcc, 0x66, 0x77, 0xec, 0x94, 0x07, 0xe8,
	0xfb, 0xf4, 0x41, 0xfa, 0xa3, 0x8f, 0x54, 0xcd, 0xcc, 0xb2, 0x6c, 0x60, 0xc0, 0x36, 0xca, 0xbf,
	0xe1, 0xcc, 0xb9, 0xf7, 0x9e, 0x39, 0x73, 0xe7, 0xae, 0x8d, 0x07, 0x4e, 0xe0, 0x45, 0xad, 0x20,
	0x64, 0xe3, 0x88, 0xb3, 0x90, 0x2e, 0x56, 0xcd, 0x20, 0x64, 0x9c, 0x91, 0x72, 0x02, 0x58, 0xff,
	0x64, 0x50, 0x7c, 0x1b, 0xb2, 0x31, 0x8d, 0x22, 0x52, 0x43, 0xd6, 0x73, 0xcd, 0xcc, 0x41, 0xe6,
	0xb0, 0x6c, 0x67, 0x3d, 0x97, 0x10, 0x18, 0x53, 0x67, 0x42, 0xcd, 0xac, 0x44, 0xe4, 0x5a, 0x60,
	0x2e, 0x8d, 0xc6, 0x66, 0x4e, 0x61, 0x62, 0x2d, 0xb0, 0xf7, 0xcc, 0xf1, 0x4d, 0x43, 0x61, 0x62,
	0x4d, 0x1e, 0xa2, 0x7c, 0xe2, 0x85, 0x11, 0x1f, 0x70, 0x1a, 0x98, 0xf9, 0x83, 0xcc, 0x61, 0xa5,
	0xbd, 0xdb, 0x5c, 0xe8, 0x10, 0xb0, 0xbd, 0x60, 0x90, 0x1f, 0x61, 0xd8, 0xf4, 0x63, 0x64, 0x16,
	0x0e, 0x72, 0x87, 0x95, 0xf6, 0xfd, 0x14, 0xb3, 0x37, 0xe5, 0x1e, 0x9f, 0x0d, 0xb8, 0xc3, 0xa9,
	0x2d, 0x39, 0x96, 0x8f, 0xd2, 0xaf, 0x2c, 0xfc, 0x70, 0xe9, 0xb3, 0x4f, 0x5b, 0x4b, 0x3e, 0x44,
	0x5e, 0x96, 0x30, 0x0d, 0x59, 0x90, 0xa4, 0x0a, 0xc6, 0x6e, 0xd8, 0x8a, 0x60, 0xfd, 0x9b, 0x85,
	0x21, 0x25, 0x6e, 0x5b, 0xea, 0x7b, 0xe4, 0x39, 0x63, 0xfe, 0xbc, 0x54, 0xda, 0x85, 0x21, 0x63,
	0xbe, 0xad, 0x76, 0xc9, 0x33, 0x94, 0xc6, 0x7f, 0x7a, 0xbe, 0x1b, 0xd2, 0xa9, 0x99, 0x97, 0xcc,
	0xfd, 0x25, 0xbf, 0x9a, 0x2f, 0xe3, 0xfd, 0xde, 0x94, 0x87, 0x33, 0x3b, 0xa1, 0x93, 0x47, 0x28,
	0xd2, 0xcb, 0x4b, 0x3a, 0xe6, 0x37, 0xf9, 0x37, 0xa7, 0x09, 0xbb, 0x43, 0x61, 0x77, 0x71, 0xb3,
	0xdd, 0x82, 0xd3, 0x78, 0x85, 0xea, 0x67, 0x85, 0x49, 0x1d, 0xb9, 0x0f, 0x74, 0x16, 0x3b, 0x21,
	0x96, 0xe2, 0x88, 0xd7, 0x8e, 0x7f, 0xa5, 0xbc, 0xd0, 0x5c, 0xb4, 0xda, 0xfd, 0x29, 0x7b, 0x9c,
	0xb1, 0xfe, 0xce, 0xa2, 0x92, 0xaa, 0xb1, 0xe2, 0xea, 0x77, 0xa8, 0x50, 0xb9, 0x3d, 0xe2, 0xb3,
	0x60, 0x6e, 0x2e, 0x14, 0x34, 0x9c, 0x05, 0x94, 0xb4, 0x60, 0x5c, 0xd3, 0xf0, 0x42, 0x5a, 0x5c,
	0x6b, 0xef, 0xe9, 0xa5, 0x37, 0xcf, 0x69, 0x78, 0x61, 0x4b, 0x22, 0xd9, 0x07, 0x22, 0x81, 0x8d,
	0xe4, 0x6d, 0xe5, 0x65, 0xc2, 0xb2, 0x44, 0x5e, 0x8b, 0x2b, 0xdb, 0x07, 0xc6, 0x6c, 0xca, 0xe9,
	0x5f, 0x7c, 0xe4, 0xb9, 0x66, 0x41, 0x6d, 0xc7, 0x48, 0xdf, 0xb5, 0xce, 0x61, 0x88, 0x5c, 0xa4,
	0x80, 0x6c, 0x7f, 0x50, 0xff, 0x8a, 0x00, 0x85, 0xfe, 0x60, 0xf4, 0xfa, 0xcd, 0xb0, 0x9e, 0x21,
	0x45, 0xe4, 0xce, 0x3a, 0x83, 0x7a, 0x96, 0xdc, 0x43, 0xb5, 0xfb, 0xa6, 0x27, 0xe1, 0xd1, 0x59,
	0xe7, 0xbc, 0x57, 0xcf, 0x09, 0x5e, 0xef, 0xb7, 0xfe, 0x60, 0x38, 0xa8, 0x1b, 0x84, 0xa0, 0x96,
	0x6c, 0x4b, 0xb0, 0x9e, 0xb7, 0xce, 0x50, 0xeb, 0x5c, 0x44, 0x3c, 0x74, 0xc6, 0x5c, 0xe9, 0xd6,
	0xf5, 0x57, 0xca, 0x02, 0xb9, 0xd6, 0xf5, 0x97, 0xf5, 0x3b, 0x6a, 0x2a, 0x43, 0x7f, 0x1a, 0x71,
	0x67, 0x3a, 0xa6, 0xb7, 0xed, 0x54, 0x99, 0x3d, 0xa7, 0xc9, 0x6e, 0xa4, 0xb2, 0xbf, 0x80, 0x21,
	0xba, 0x74, 0xdb, 0xee, 0xb7, 0xfe, 0x40, 0xe1, 0x2d, 0x0d, 0x23, 0x36, 0xbd, 0x6d, 0x86, 0x90,
	0xf9, 0x89, 0x2a, 0xb1, 0x26, 0x0f, 0x00, 0x97, 0x06, 0x4e, 0xc8, 0x27, 0x74, 0xca, 0x63, 0x6d,
	0x29, 0xc4, 0x7a, 0x87, 0xbd, 0x8e, 0xeb, 0xc6, 0xaf, 0x76, 0xc8, 0xe6, 0xa3, 0xc1, 0xa6, 0x1f,
	0xaf, 0x68, 0xc4, 0xc9, 0x1e, 0xca, 0x9f, 0x24, 0x30, 0x4a, 0xaa, 0x97, 0x14, 0xd0, 0x77, 0xc9,
	0xb7, 0x28, 0x89, 0xfe, 0x19, 0x79, 0x6e, 0x64, 0x66, 0x0f, 0x72, 0x87, 0x65, 0xbb, 0x28, 0x7e,
	0xf7, 0xdd, 0xc8, 0x6a, 0xa0, 0x14, 0xdb, 0xea, 0x2e, 0x4b, 0xb7, 0x1a, 0xc2, 0x94, 0x2e, 0x93,
	0x26, 0x32, 0x97, 0xc5, 0x3b, 0x72, 0x6d, 0xed, 0x21, 0xdf, 0x9b, 0x04, 0x7c, 0xa6, 0xdb, 0x6c,
	0xff, 0x57, 0x45, 0x59, 0x28, 0x1d, 0x88, 0x86, 0x25, 0x2d, 0x54, 0x5e, 0x79, 0x11, 0x9f, 0x8f,
	0xdf, 0xcf, 0x27, 0x43, 0x97, 0x35, 0x96, 0x01, 0xf2, 0x18, 0x38, 0xa5, 0x09, 0xff, 0xeb, 0x95,
	0xde, 0xef, 0xbb, 0x0d, 0xcd, 0x24, 0x23, 0xc7, 0xa8, 0xbe, 0x0c, 0xa9, 0xc3, 0xe9, 0x1c, 0xd0,
	0x90, 0x1a, 0xba, 0x6c, 0xe4, 0x09, 0xaa, 0x5d, 0xea, 0xd3, 0x45, 0xa4, 0xb6, 0x66, 0x3d, 0x0d,
	0xca, 0xb3, 0x3f, 0x47, 0xbd, 0x7b, 0x15, 0xf8, 0xde, 0xd8, 0xb9, 0x21, 0x54, 0x27, 0xb7, 0x85,
	0x62, 0xc7, 0x75, 0xe5, 0xcc, 0x5d, 0x9e, 0x24, 0x7a, 0x95, 0x2d, 0x40, 0xa9, 0xd4, 0xc7, 0xac,
	0xca, 0x7b, 0x84, 0x52, 0xcf, 0xf5, 0xf8, 0x1d, 0x4a, 0x3c, 0x46, 0x35, 0x39, 0x90, 0x0c, 0xd3,
	0x9e, 0x66, 0x39, 0x17, 0x79, 0x8a, 0xca, 0x29, 0xe5, 0xc9, 0xd7, 0x4a, 0x1b, 0x94, 0x06, 0x13,
	0xe6, 0x2f, 0xa8, 0xa9, 0x2b, 0x4b, 0x90, 0x1f, 0x52, 0xb4, 0x0d, 0xfd, 0xae, 0x97, 0xff, 0x14,
	0x35, 0xe5, 0xd0, 0x66, 0x29, 0xab, 0x4e, 0x0d, 0xf0, 0x8d, 0xae, 0xd8, 0x56, 0x6a, 0x92, 0xe0,
	0x77, 0xb8, 0x6f, 0x4f, 0xae, 0xe3, 0x98, 0x93, 0x90, 0x4d, 0xbe, 0x4c, 0xda, 0x87, 0x28, 0x8b,
	0xe7, 0x34, 0x94, 0x9f, 0xd3, 0x9b, 0x1f, 0x53, 0x0b, 0xc5, 0x53, 0x2a, 0xd9, 0x37, 0x5f, 0xa6,
	0x64, 0xb5, 0x01, 0x75, 0x27, 0xf2, 0xd7, 0xf2, 0xb6, 0xde, 0xf8, 0xa3, 0x79, 0x6b, 0xae, 0xaf,
	0xb3, 0xb6, 0x3d, 0xef, 0x50, 0xa6, 0x8d, 0x9a, 0x38, 0xba, 0xfc, 0xf6, 0x9d, 0x84, 0xce, 0xfb,
	0xdb, 0x9c, 0xff, 0x39, 0x76, 0x4e, 0xe9, 0x22, 0x44, 0x2f, 0x6e, 0xcd, 0x9f, 0x06, 0xe4, 0x05,
	0x76, 0x95, 0x17, 0x8b, 0xf8, 0x35, 0x54, 0xbd, 0xe0, 0x63, 0xec, 0xce, 0x9f, 0xec, 0xc6, 0xfa,
	0xab, 0xe6, 0xfc, 0x8c, 0xaa, 0x7a, 0xbb, 0x5b, 0xd5, 0xed, 0x80, 0xa4, 0xde, 0xf1, 0x56, 0x29,
	0x9a, 0x80, 0x9c, 0xda, 0x94, 0x05, 0x3e, 0xbd, 0x85, 0xcf, 0x47, 0x28, 0x8b, 0xa1, 0xad, 0x3e,
	0x82, 0xda, 0x43, 0xde, 0x4b, 0x0f, 0x41, 0xc5, 0x7b, 0x82, 0x9d, 0x78, 0x64, 0xab, 0xdf, 0xab,
	0x94, 0x75, 0x73, 0x6a, 0x27, 0x1e, 0xd8, 0x1b, 0xea, 0xad, 0x9a, 0xfa, 0x0c, 0xbb, 0x8b, 0x79,
	0x7d, 0x27, 0xa5, 0x17, 0x05, 0xf9, 0x2f, 0xc5, 0xd1, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x28,
	0xcd, 0xac, 0x35, 0x74, 0x0c, 0x00, 0x00,
}
