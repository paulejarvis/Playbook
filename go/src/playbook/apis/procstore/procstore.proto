syntax = "proto3";

// ProcStore models the concrete types satisfying our ontology of process and state
// There is much care taken here to try and use the proto/go type system to ensure
// that all process entered is "valid". There are some additional checks/constraints
// on validity that cannot be expressed/ worth a complexity tradeoff, those located
// in playbook/validator/
// The translation layer (to and from proto) is located in playbook/dbtranslation
package procstore;

enum NodeKind {
    NK_UNSET = 0;
    NK_EXECUTOR = 1;
    NK_OBJECT = 2;
    NK_STEP = 3;
    NK_PROCESS = 4;
    NK_STATE = 5;
    NK_WORKFLOW = 6;
    NK_PERSON = 7;
}

message Object {
    enum ObjectType {
        OT_UNSET = 0;
        OT_THING = 1;
        OT_TOOL = 2;
        OT_QUALIFICATION = 4;
        OT_EMPLOYEE = 5;
        OT_MACHINE = 6;
    }

    // Subclasses of Object...
    message Thing {
        map<string, string> props = 1; // TODO(hdh) use proto.any
    }

    message Tool {
        string login_page = 1;
    }

    message Qualification {
        Object certified_by = 1;
    }

    message Employee {
        string role_name = 1;
        repeated Person can_be = 2;
    }

    message Machine {
        string program_name = 1;
    }

    // Inherited Properties
    string uid =1;
    NodeKind node_kind = 2;
    ObjectType object_type = 3;
    string hash_id = 4;

    string name = 5;
    string description = 6;

    oneof instantiated_by {
        Thing thing = 7;
        Tool tool = 8;
        Qualification qualification = 9;
        Employee employee = 13;
        Machine machine = 14;
    }

    // Relations...
    // Objects can exist_in 0, or 1 other objects
    Object exists_in = 10;

    oneof state {
        // Objects can be in exactly 0, or 1 states
        Object is_in = 11;
        Object is_not_in = 12;
    }

}
// STATES ARE JUST ENVELOPES DONT STORE THEM


message Step {
    message StepChoices {
        message StepChoice {
            string choice = 1;
            Step step = 2;
        }
        repeated StepChoice choice=1;
    }

    message Steps {
        repeated Step steps = 1;
    }

    string uid =1;
    NodeKind node_kind = 2;
    string hash_id = 3;

    Object executed_by = 4;
    repeated State causes = 5;
    repeated State requires = 6;

    string name = 11;
    string description = 12;


    oneof preceded_by {
        Steps preceding_steps = 7;
        Step  preceding_step = 8;
    }


    oneof followed_by {
        StepChoices following_steps = 9;
        Step following_step = 10;
    }
}

message Process {
    string uid =1;
    // An ID we assign that allows us to update a particular process.
    string guid = 7;
    NodeKind node_kind = 2;
    string hash_id = 3;

    string name = 4;
    string description = 5;

    // Relations
    Step starts_with = 6;
}

// State lacks many shared fields because it is actually stored as a simple relationship
message State {
    // Relations
    Object subject = 6;

    string predicate = 7;

    oneof object {
        string state_name = 8;
        Object state_object = 9;
    }
}


// Workflow and Person are our weirdest types, they exist outside any individual processes graph
// May want to move them into SQL?

message Workflow {
    string uid =1;
    NodeKind node_kind = 2;
    string hash_id = 3;

    string name = 4;
    string description = 5;

    // Relations
    repeated Process contains = 6;
}



message Person {
    string uid = 1;
    NodeKind node_kind = 2;
    string hash_id = 3;
    string name = 5;

    // This must resolve to be a qualification object
    repeated Object has_qualification = 4;
}


// TODO(henry): figure out dgraph type imports
message Assigned {
    map<string, string> uids = 1;
}

service ProcStore {
      rpc CreateProcess (Process) returns (Assigned) {}
}
